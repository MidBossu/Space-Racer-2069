<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuSelected = 1;
textcolor = c_white;
instructions = -1;
global.choice = -1;
global.players = 1;
audio_play_sound(snd_race,10,true);
menuPage = 0;

  menuText[0,0] = 3;
  menuText[0,1] = "Start Game";
  menuText[0,2] = "Instructions";
  menuText[0,3] = "Quit Game";
  
  menuText[1,0] = 5;
  menuText[1,1] = "1 Player";
  menuText[1,2] = "2 Players";
  menuText[1,3] = "3 Players";
  menuText[1,4] = "4 Players";
  menuText[1,5] = "Back"
  
  menuText[2,0] = 5;
  menuText[2,1] = "Cyan Glaciar";
  menuText[2,2] = "RockeTank";
  menuText[2,3] = "Copper Thunder";
  menuText[2,4] = "Da Green MACHINE";
  menuText[2,5] = "Back"
  
  menuText[3,0] = 4;
  menuText[3,1] = "Track 1";
  menuText[3,2] = "Track 2";
  menuText[3,3] = "Track 3";
  menuText[3,4] = "Back";
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Menu code
menu_scroll_up = keyboard_check_pressed(ord('W'));
menu_scroll_down = -keyboard_check_pressed(ord('S'));
menu_select = keyboard_check_pressed(vk_space);
menuSelected -= menu_scroll_up+menu_scroll_down;

  if (menuSelected &lt; 1) { menuSelected = menuText[menuPage,0]; }

  if (menuSelected &gt; menuText[menuPage,0]) { menuSelected = 1; }

   switch(menuPage)
{
    case 0: // Main Menu
  switch(menuSelected)
        {
            case 1:
            if(menu_select) { menuPage = 1; menuSelected = 1;}
            break;
             case 2:
            if(menu_select) {instructions *= -1;}
            break;
            case 3:
            if(menu_select) game_end();
            break;
        }
    break;
    //Player select
    case 1:
    //destroy other menus
    global.players = 1;
        if(instance_exists(obj_menu2))
    {
        with(obj_menu2)
        {
        instance_destroy();
        }
    }
           if(instance_exists(obj_menu3))
    {
        with(obj_menu3)
        {
        instance_destroy();
        }
    }
           if(instance_exists(obj_menu4))
    {
        with(obj_menu4)
        {
        instance_destroy();
        }
    }
     //end 
   
        switch(menuSelected)
            {
            case 1:
            if(menu_select) { menuPage = 2; menuSelected = 1; global.players = 1; global.choice2 = 5; global.choice3 = 6; global.choice4 = 7;}
            break;
            case 2:
            if(menu_select) { menuPage = 2; menuSelected = 1; global.players = 2; global.choice3 = 6; global.choice4 = 7; instance_create(x,y,obj_menu2);}
            break;
            case 3:
            if(menu_select) { menuPage = 2; menuSelected = 1; global.players = 3; global.choice4 = 7; instance_create(x,y,obj_menu2); instance_create(x,y,obj_menu3);}
            break;
            case 4:
            if(menu_select) { menuPage = 2; menuSelected = 1; global.players = 4; instance_create(x,y,obj_menu2);instance_create(x,y,obj_menu3);instance_create(x,y,obj_menu4);}
            break;
            case 5:
            if(menu_select) { menuPage = 0; menuSelected = 1;}
            break;
            }
    break;
    
       //car select
    case 2:
    instructions = -1;
        switch(menuSelected)
            {
            case 1:
            if(menu_select &amp;&amp; global.choice2 != 1 &amp;&amp; global.choice3 != 1 &amp;&amp; global.choice4 !=1) { menuPage = 3; menuSelected = 1; global.choice = 1;}
            break;
            case 2:
            if(menu_select &amp;&amp; global.choice2 != 2 &amp;&amp; global.choice3 != 2 &amp;&amp; global.choice4 !=2) { menuPage = 3; menuSelected = 1; global.choice = 2;}
            break;
            case 3:
            if(menu_select &amp;&amp; global.choice2 != 3 &amp;&amp; global.choice3 != 3 &amp;&amp; global.choice4 !=3) { menuPage = 3; menuSelected = 1; global.choice = 3;}
            break;
            case 4:
            if(menu_select &amp;&amp; global.choice2 != 4 &amp;&amp; global.choice3 != 4 &amp;&amp; global.choice4 !=4) { menuPage = 3; menuSelected = 1; global.choice = 4;}
            break;
            case 5:
            if(menu_select) { menuPage = 1; menuSelected = 1;}
            break;
            }
    break;
    
      case 3:
      //track select
        switch(menuSelected)
            {
            case 1:
            if(menu_select &amp;&amp; !instance_exists(obj_menu2) &amp;&amp; !instance_exists(obj_menu3) &amp;&amp; !instance_exists(obj_menu3)) room_goto(rm_track1);
            break;
            case 2:
            if(menu_select &amp;&amp; !instance_exists(obj_menu2) &amp;&amp; !instance_exists(obj_menu3) &amp;&amp; !instance_exists(obj_menu3)) room_goto(rm_track2);
            break;
            case 3:
            if(menu_select &amp;&amp; !instance_exists(obj_menu2) &amp;&amp; !instance_exists(obj_menu3) &amp;&amp; !instance_exists(obj_menu3)) room_goto(rm_track3);
            break;
            case 4:
            if(menu_select) { menuPage = 2; menuSelected = 1;}
            break;
            }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_game);
draw_set_halign(fa_center);
if(instructions = 1)
{
draw_sprite(spr_key,0,(room_width/5),(room_height/5)*4);
draw_sprite(spr_key,1,(room_width/5)*2,(room_height/5)*4);
draw_sprite(spr_key,2,(room_width/5)*3,(room_height/5)*4);
draw_sprite(spr_key,3,(room_width/5)*4,(room_height/5)*4);
}

switch(global.players)
{
//One player
case 1:
draw_sprite(spr_logo,-1,room_width/2,0);
 for (i = 1; i &lt;= menuText[menuPage,0]; i+=1)
  {
    if (menuSelected = i) 
    { 
    textcolor = c_red; 
    } 
    else 
    { 
    textcolor = c_white; 
    }
    draw_text_outline(room_width/2,room_height/2+(i*32)-16,menuText[menuPage,i]);
  }
break; 
//Two players
case 2:
  draw_sprite(spr_player,0,room_width/4,room_height/2);
    draw_sprite(spr_player,1,(room_width/4)*3,room_height/2);
 for (i = 1; i &lt;= menuText[menuPage,0]; i+=1)
  {
    if (menuSelected = i) 
    { 
    textcolor = c_red; 
    } 
    else 
    { 
    textcolor = c_white; 
    }
    draw_text_outline((room_width/4),room_height/2+(i*32)-16,menuText[menuPage,i]);
  }
 
  with(obj_menu2)
  {
       for (i = 1; i &lt;= menuText[menuPage,0]; i+=1)
      {
        if (menuSelected = i) 
        { 
        textcolor = c_red; 
        } 
        else 
        { 
        textcolor = c_white; 
        }
        draw_text_outline((room_width/4)*3,room_height/2+(i*32)-16,menuText[menuPage,i]);
      }
  }
break;
//Three Players
case 3:
  draw_sprite(spr_player,0,room_width/4,room_height/4);
    draw_sprite(spr_player,1,(room_width/4)*3,(room_height/4));
        draw_sprite(spr_player,2,(room_width/4),(room_height/4)*3);
 for (i = 1; i &lt;= menuText[menuPage,0]; i+=1)
  {
    if (menuSelected = i) 
    { 
    textcolor = c_red; 
    } 
    else 
    { 
    textcolor = c_white; 
    }
    draw_text_outline((room_width/4),room_height/4+(i*32)-16,menuText[menuPage,i]);
  }
 
  with(obj_menu2)
  {
       for (i = 1; i &lt;= menuText[menuPage,0]; i+=1)
      {
        if (menuSelected = i) 
        { 
        textcolor = c_red; 
        } 
        else 
        { 
        textcolor = c_white; 
        }
        draw_text_outline((room_width/4)*3,(room_height/4)+(i*32)-16,menuText[menuPage,i]);
      }
  }
  
    with(obj_menu3)
  {
       for (i = 1; i &lt;= menuText[menuPage,0]; i+=1)
      {
        if (menuSelected = i) 
        { 
        textcolor = c_red; 
        } 
        else 
        { 
        textcolor = c_white; 
        }
        draw_text_outline((room_width/4),(room_height/4)*3+(i*32)-16,menuText[menuPage,i]);
      }
  }
break;
//Four Players

case 4:
  draw_sprite(spr_player,0,room_width/4,room_height/4);
    draw_sprite(spr_player,1,(room_width/4)*3,(room_height/4));
        draw_sprite(spr_player,2,(room_width/4),(room_height/4)*3);
            draw_sprite(spr_player,3,(room_width/4)*3,(room_height/4)*3);
 for (i = 1; i &lt;= menuText[menuPage,0]; i+=1)
  {
    if (menuSelected = i) 
    { 
    textcolor = c_red; 
    } 
    else 
    { 
    textcolor = c_white; 
    }
    draw_text_outline((room_width/4),room_height/4+(i*32)-16,menuText[menuPage,i]);
  }
 
  with(obj_menu2)
  {
       for (i = 1; i &lt;= menuText[menuPage,0]; i+=1)
      {
        if (menuSelected = i) 
        { 
        textcolor = c_red; 
        } 
        else 
        { 
        textcolor = c_white; 
        }
        draw_text_outline((room_width/4)*3,(room_height/4)+(i*32)-16,menuText[menuPage,i]);
      }
  }
  
    with(obj_menu3)
  {
       for (i = 1; i &lt;= menuText[menuPage,0]; i+=1)
      {
        if (menuSelected = i) 
        { 
        textcolor = c_red; 
        } 
        else 
        { 
        textcolor = c_white; 
        }
        draw_text_outline((room_width/4),(room_height/4)*3+(i*32)-16,menuText[menuPage,i]);
      }
  }
      with(obj_menu4)
  {
       for (i = 1; i &lt;= menuText[menuPage,0]; i+=1)
      {
        if (menuSelected = i) 
        { 
        textcolor = c_red; 
        } 
        else 
        { 
        textcolor = c_white; 
        }
        draw_text_outline((room_width/4)*3,(room_height/4)*3+(i*32)-16,menuText[menuPage,i]);
      }
  }
break;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
